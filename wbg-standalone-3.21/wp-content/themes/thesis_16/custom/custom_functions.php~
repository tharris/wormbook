<?php

// *********************************************************************
//
//       CUSTOM TEMPLATE FUNCTIONS
//
// *********************************************************************

$PREFIX = '_wbg';


// This is ONLY added on post pages.  I guess that is okay.
// Originally, I had thought I would direct users
// to 1) register
// 2) send them to the admin panel to post a new entry.
// the admin panel, too.
function add_custom_javascript() { ?>
 <script type="text/javascript" src="<?php bloginfo('template_url'); ?>/custom/custom.js"></script>
    <?php
    }

//add_action('wp_head','add_custom_javascript');



// Set up some custom templates
remove_action('thesis_hook_custom_template','thesis_custom_template_sample');

////////////////////////////////////////////////
//
// gazette_home_page: The Home Page for the WBG
//     page ID: 8
function gazette_home_page() {
  
  if (is_page('8') || is_front_page() ) {    
    echo '<div id="content">';
    //    thesis_content_classes();
    //    echo ">";    
    //thesis_hook_before_content();
    
    // Customize the loop
    // We will only include entries from the current
    // issue specified as a variable in the page content itself.
    global $post;
    global $thesis;
    
    while (have_posts()) {
      the_post();
      $post_image = thesis_post_image_info('image');
      
      thesis_hook_before_post_box();          
      	?>
      <div class="post_box top" id="post-<?php the_ID(); ?>">
	 
	 <?php

	 // Stick in the current cover, floating left with the TOC wrapping around it.
	 // TODO
	 // This should be DYNAMIC and should LINK TO the current cover
	 //	 echo '<div id="cover-image-solo">
         //      <a href="/wbg/volumes/current-cover-large.jpg">
         //            <img src="/wbg/volumes/current-cover.jpg" width="250px" />
         //      </a>
         // </div>';

	 echo '<div id="pseudo-sidebar">';
              echo '<div id="cover-image">
                    <a href="/wbg/volumes/current-cover-large.jpg">
                    <img src="/wbg/volumes/current-cover.jpg" />
                 </a>
                 </div>';
	 
	 echo '<div id="big-note">
	   <h3>Next Worm Breeder\'s Gazette</h3>
           <p class="noindent">
	   The next issue of the Worm Breeder\'s Gazette (Volume 19, #1) will be released in Dec 2010.  The <b>submission deadline</b> is <b>November 15th, 2010</b>.</p>
          <h3>Meetings, Courses and Workshops</h3>
          <p class="noindent">
              Workshop on the Biology of the <em>C. elegans</em> Male, June 29-July 1, 2010
          </p>

          <h3>Stay up-to-date!</h3>
          <p class="noindent">Subscribe for updates to the WBG by <a href="http://feedburner.google.com/fb/a/mailverify?uri=TheWormBreedersGazette&amp;loc=en_US">email</a> or <a href="http://feedburner.google.com/TheWormBreedersGazette">RSS</a>.
          </p>
         
          <div class="readmore"><a href="/wbg/news/">read more...</a></div>
';

	 //	 echo '<p class="noindent">
         //      <a href="http://feedburner.google.com/fb/a/mailverify?uri=TheWormBreedersGazette&amp;loc=en_US">Subscribe to The Worm Breeder\'s Gazette by Email</a>
	 // </p>';

	 echo '</div></div>';

      ?>

      <?php
	    // Custom headline area not needed for home
	    // custom_thesis_headline_area(false, $post_image);
	 
	    // The content of the post
	    // The page content should specify the category name of the current
	    // issue. It will make calls to display_issue_contents() 
	    // and thesis_hook_after_headline.
	  
	  // This is really PAGE content...
	  thesis_post_content(false, $post_image); 
	 echo "</div>";
	 echo "</div>";
	 
	 thesis_hook_after_post_box();
    }
    
    thesis_hook_after_content();
    
    echo "</div>";

    // To use dynamic sidebars, uncomment this.
    // thesis_sidebars();

    // Instead we will over-ride Thesis's sidebar build
    // on the home page. The WBG theme as a whole will
    // be single column, but the home page will LOOK
    // like it has a sidebar. 
    //    echo '<div id="sidebars">';
    //echo '			<div id="sidebar_1" class="sidebar">' . "\n";
    //echo '				<ul class="sidebar_list">' . "\n";
    //echo '<img src="/wbg/i/covers/current-cover.jpg" width="250px" />';
    //echo '</ul></div></div>';


    echo ' </div>' . "\n";
  }
}
add_action('thesis_hook_custom_template','gazette_home_page');


////////////////////////////////////////////////
//
// A single column page with no comments.
//   Used for
//      * Instructions for authors (68)
//      * About (2)
//      * Citing the Gazette (178)
//      * Gazette Archive (list of all issues) (91)
//      * News
// REARCH STATUS: DONE
function single_column_no_comments_page() {
 
  if (is_page('68') || is_page('2') || is_page('178')  || is_page('91') || is_archive() || is_page('845')) {
    echo '<div id="content_box" class="narrow_box">' . "\n";
    
    // Display content ( derived from thesis_content_column )
    echo '<div id="content"';
    thesis_content_classes();
    thesis_hook_before_content();
    
    // Customize the loop and remove the "comments closed"
    // Was: thesis_page_loop();
    global $post;
    global $thesis;
    
    while (have_posts()) {
      the_post();
      $post_image = thesis_post_image_info('image');
      
      thesis_hook_before_post_box();
	?>
	
	<div class="post_box top" id="post-<?php the_ID(); ?>">
	   <?php custom_thesis_headline_area(false, $post_image); ?>
	   <div class="format_text">
	      
	      <?php thesis_post_content(false, $post_image); ?>
	      </div>
		  </div>
		  
		  <?php
		  thesis_hook_after_post_box();
    }
    
    thesis_hook_after_content();
    
    echo "</div>";
    echo '</div>' . "\n";
  }
}
add_action('thesis_hook_custom_template','single_column_no_comments_page');



////////////////////////////////////////////////
//
// Individual Post templates
//
//  This is handled by single.php in the
//  thesis root/                             
//





// ******************************************************
//
//       BOILERPLATE FORMATTING
//
// ******************************************************

// Remove the comments thing. It's ugly.
// This is a filter.
function remove_comments_intro($content) {
  $content = '<div class="comments_intro">';
  $content .= '<p><span>Add a Comment</span></p>';
  $content .= '</div>' . "\n";
  return $content;
}
add_filter('thesis_comments_intro', 'remove_comments_intro');



// The Generic Gazette header
function add_header() {
?>
 <div id="header-left">
    <p id="logo">
      <a href="/wbg/">
      <img src="/wbg/i/banner_small.png" alt="The Worm Breeder's Gazette" width="800px" />
      </a>
    </p>
  </div>
<?php
 
}

remove_action('thesis_hook_header','thesis_default_header');
add_action('thesis_hook_header','add_header');


# Add the search box to the navigation bar.
function _search_box() {
  
?>
<div class="widget thesis_widget_search">
<form method="get" class="search_form" action="http://dev.wormbook.org/wbg/">
<input class="text_input" type="text" 
       value="Search the Gazette" 
       name="s" 
       id="s" onfocus="if (this.value == 'To search, type and hit enter') {this.value = '';}" onblur="if (this.value == '') {this.value = 'To search, type and hit enter';}" />
<input type="hidden" id="searchsubmit" value="Search" />
</form>
</div>

<?php
}
add_action('thesis_hook_last_nav_item', 'thesis_search_form');



// Add in a custom footer
function add_footer() {
  ?>
 
 <div style="float:left">
    <span style="border-right:1px solid #DDDDDD;float:left;padding-right:10px;margin-right:10px">
    <a href="http://www.wormbook.org">
    <img width="125px" src="/images/wormbook_sponsor.png" />
    </a>
    </span>
    <span style="border-right:1px solid #DDDDDD;float:left;padding-right:10px;margin-right:10px">
    
    <a href="http://creativecommons.org/licenses/by/2.5/" target="_blank">
    <img style="float:left;border:0" src="/images/somerights20.gif" align="middle" alt="Creative Commons License"/>
    </a>
    </span>
    </div>
    
    <div>    
    All content, except where otherwise noted, is licensed under a
    <a href="http://creativecommons.org/licenses/by/2.5/" title="Creative Commons Attribution License" target="_blank">
    Creative Commons Attribution License.
    </a>
    <br></br>
    General information about the Worm Breeder's Gazette on this page is copyrighted under the 
      <a href="/db/misc/copyright_gfdl">GNU Free Documentation License</a>.
</div>

<?php
}
remove_action('thesis_hook_footer','thesis_footer_scripts');
add_action('thesis_hook_footer','add_footer');
// Remove thesis attribution
remove_action('thesis_hook_footer','thesis_attribution');


// Move the navigation menu BELOW the header.
// We have to remove it from the before_header_hook
remove_action('thesis_hook_before_header','thesis_nav_menu');
add_action('thesis_hook_after_header','thesis_nav_menu');


// Create a navigation bar when viewing issue contents
function previous_next_article() {
        global $thesis;

        $use_arrows = 1;
        $nav_text = "ARTICLES";
        // FORMAT:     <previous>  ARTICLES  <next>
        // FORMAT:     <previous>  VOLUME  <next>

        if (is_single() && $thesis['display']['posts']['nav']) {

            // These posts should be limited to the current category (issue)
            $previous = get_previous_post();
            $next     = get_next_post();
       
            echo '<div class="prev_next post_nav">' . "\n";
	    echo '<div class="previous">';

            // pre-Volume 18, No. 2 (deprecating once entries are migrated)
            $categories = get_the_category(',');
            if (is_legacy()) {
                  $volume = $categories[0]->cat_name;
            } else {
                 // Volumes > 18, No. 2. Volumes are a custom taxonomy         
                 $volume = strip_tags(get_the_term_list($post->ID,  'volume', '', ', ', ''));
            }
            echo '<span>' . $volume . ': </span>';

            // Link to the TOC
            echo '<a href="/wbg/archive/' . $categories[0]->category_nicename . '/">contents</a>';

            // NEXT is really PREVIOUS for when thinking of a magazine
	    if ($next) {
                 echo " | ";
                 next_post_link('%link', '&#171; previous',1);
            }


           // PREVIOUS is really NEXT when thinking of a magazine
          if ($previous) {                          
                 echo " | ";
                 previous_post_link('%link','next &#187;',1);
           }

           // Provide a link to the PDF using the category slug
           // and the name of the PDF file.
           $slug     = $categories[0]->category_nicename;

           $id = get_the_ID();
           $pdf = get_post_meta($id,'PDF','true');
      
           echo '<div class="navigation-meta">';
           echo "<a title=\"Download a PDF of this article\" href=\"/wbg/volumes/$slug/pdf/$pdf\">
							  Download as PDF
							  </a> | ";

      // Provide a dynamic link to comments - will display the number of comments if there are any.
      echo '<a href="#respond">';
	     comments_number('Submit a comment', '1 comment', '% comments');
      echo "</a>";
      echo "</div>";

    echo '</div>' . "\n";
   echo '</div>' . "\n";
   }
}

// REMOVE THEM FROM THEIR DEFAULT LOCATION
// ... AND PLACE THEM ABOVE THE POST BOX
remove_action('thesis_hook_after_content','thesis_prev_next_posts');
add_action('thesis_hook_before_post_box','previous_next_article');
// OR Below the posts and comment form
// add_action('thesis_hook_after_content','previous_next_article');



// Add some caveats to the comment form.
function comment_caveats() {
?>
<div class="comment-caveat">
   Your email address will not be displayed and will never be shared or distributed.<br /><br />
   Your comment will be held for moderation. The Worm Breeder's 
    Gazette editors reserve the right to refuse offensive or inappropriate comments.

</div>
<?php
    }
add_action('thesis_hook_comment_form','comment_caveats');






// ******************************************************
//
//       Issue-wide and single post processing
//
// ******************************************************

// display_issue_contents: a brief listing of an issue
// Should be supplied with a category name
function display_issue_contents($category) {

  //The Query
  query_posts("category_name=$category");

  //The Loop
  echo '<div id="toc">';

  // Include the image
  // Convert the category into a filename
  // $filename = str_replace(" ","_",$category);
  // $filename = str_replace(",","",$filename);
  // $filename = strtolower($filename);
 
  if ( have_posts() ) {
    while ( have_posts() ) {
      the_post();

      if (is_legacy() ) {
      }      
      echo '<div class="entry">';
      
      // The title
      // Needs: Links to pages, authors custom field.
      // This is the post title, thus the same for legacy or new architecture
      //	if (is_legacy()) {
      echo '<div class="title">';
      echo '<a href="' . get_permalink() . '">';
      echo get_the_title() . '</a></div>';
      //	}
      
      // The authors
      _display_authors('TOC');

      // The Tags
      _display_tags();
      
      if ($category == "unvetted submissions") {
	// Get submitter info
	$author_name = get_post_meta($id,'Author Name','true');
	$author_home_page = get_post_meta($id,'Author Home Page','true');
	if ($author_home_page) {
	  echo "<div class=\"date\">Submitted by: <a href=\"$author_home_page\">$author_name</a></div>";
	} else {
	  echo "<div class=\"date\">Submitted by: $author_name</div>";
	}
	echo '<div class="date">Submitted on: ' . get_the_time('F j, Y') . "</div>";
      }
      
      echo '</div>';
    }
  }
  echo "</div>";

  //Reset Query
  wp_reset_query();
}



// Content blocks for both TOC and individual pages.
// Context should be one of 'TOC' for table of contents
// or 'single' fo individual abstract pages.
function _display_authors($context) {

  $id = get_the_ID();
  echo '<div class="authors">';

  if (is_legacy()) {
    if ($context == 'TOC') {
      echo get_post_meta($id,'Authors (TOC)','true');
    } else {
      echo get_post_meta($id,'Authors (post)','true');
    }
  } else {

    // Create an array of formatted names, then join them together.
    $authors = array();
    for ($count = 1 ; $count<11; $count++) {

      $key = "_wbg_authors_firstname_" . $count;
      $firstname = htmlspecialchars( get_post_meta( $id, $firstkey, true ) );

      $key = "_wbg_authors_lastname_" . $count;
      $lastname = htmlspecialchars( get_post_meta( $id, $lastname, true ) );

      if ( $firstname ) {
	$authors[$count] = "$firstname $lastname";
      } 

      // Single page?  We need to add in affiliations, too. Meh.
      if ($context == 'single') {
	
      }


    }
  }

  echo "</div>";
}      


// Authors <-> affiliations
function _display_affiliations() {

  $id = get_the_ID();
    echo '<div class="affiliations">';

  if (is_legacy()) {
    echo get_post_meta($id,'Affiliations (post)','true');
  } else {
  }

    echo "</div>";

}

function _display_tags() {
  if (is_legacy()) {
    echo '<div class="tags">';
    echo the_tags() ;
    echo "</div>";
  }
}

function _load_affiliations() {
  $id = get_the_ID();
  $affiliations = array();
  for ($count = 1 ; $count<6; $count++) {
  }

}



// Provide a custom thesis_headline_area.
// This is the headline for a given post
// This is a component of thesis_hook_headline but there isn't a specific
// hook for this function.
function custom_thesis_headline_area($post_count = false, $post_image = false) {
  
  /* We're not setting up the headline area for the front page */
  if (is_front_page() ) {
    return true;
  }
  

  echo '<div class="headline_area">';
			     
  thesis_hook_before_headline($post_count);
  
  if ($post_image['show'] && $post_image['y'] == 'before-headline')
    echo $post_image['output'];
  
  if (is_404()) {
    echo '<h1>';
    thesis_hook_404_title();
    echo '</h1>' . "\n";
  } elseif (is_page()) {
    if (is_front_page()) {
      // Suppress the page title on the front page
      // echo '<h2>' . get_the_title() . '</h2>' . "\n";
    } else {
      echo '<h1>' . get_the_title() . '</h1>' . "\n";
      
      if ($post_image['show'] && $post_image['y'] == 'after-headline')
	echo $post_image['output'];
      
      thesis_hook_after_headline($post_count);
      thesis_byline();
    }
  } else {

    // Single pages. Same for legacy or new architecture
    if (is_single()) {      
      echo '<h1 class="entry-title">' . get_the_title() . '</h1>';      
    } else {
  ?>
 <h2 class="entry-title"><a href="<?php the_permalink() ?>" rel="bookmark" title="Permanent link to <?php the_title(); ?>">
    <?php the_title(); ?>
    </a>
	</h2>
	<?php
	}
    
    if ($post_image['show'] && $post_image['y'] == 'after-headline')
      echo $post_image['output'];
    
    thesis_hook_after_headline($post_count);
    thesis_byline($post_count);
    thesis_post_categories();
  }
    ?>
  </div>
  <?php
}
 

// Add custom fields meta data to single posts after the post headline.
// This pulls data from the custom fields.
 function add_meta_data_after_post_headline() {

   if (is_single()) {
     echo '<div class="post-meta">';

     // The authors
     _display_authors('single');

     // Affiliations
     _display_affiliations();

     $correspondence = get_post_meta($id,'Correspondence to (post)','true');
     if ($correspondence) {

       echo '<div class="correspondence-to">';
       echo "Correspondence to: ";
       echo $correspondence;
       echo "</div>";

     }
     echo "</div>";  
   }
}
add_action('thesis_hook_after_headline','add_meta_data_after_post_headline');





// Volume 18, Nos. 1 & 2 were entered as Posts
// before I had written the custom Abstracts
// post type. They require special formatting
// This function acts as a simple boolean.
function is_legacy() {
  $categories = get_the_category(',');
  
  if ($categories[0]->cat_name == 'Volume 18, Number 1' || $categories[0]->cat_name == 'Volume 18, Number 2') {
    //isset($categories[0])) {
    return true;
  } else {
    return false; 
  }
}




////////////////////////////////////////////////
//
// WBG Submissions
//

// Build up custom entries in the admin interface.
// This is MOSTLY for administrative purposes (ie correcting errors)



add_action('admin_menu', 'wbg_add_meta_boxes');

function wbg_add_meta_boxes() {
  $meta_boxes = wbg_meta_boxes();
  global $user_level;
  foreach ($meta_boxes as $meta_box) {
    
    // Processed information is only availabe to moderators/admins
    if (($meta_box['id'] == 'wbg-processed-abstracts-meta') && $user_level < 2) {
    } else {
      add_meta_box($meta_box['id'], $meta_box['title'], $meta_box['function'], 'wbg_abstracts', 'normal', 'high');
    }
  }
  add_action('save_post', 'wbg_save_meta');
}



function wbg_save_meta($post_id) {
	$meta_boxes = wbg_meta_boxes();
	
	// We have to make sure all new data came from the proper Thesis entry fields
	foreach($meta_boxes as $meta_box) {
	  if (!wp_verify_nonce($_POST[$meta_box['noncename'] . '_noncename'], plugin_basename(__FILE__)))
	    return $post_id;
	}
	
	if ($_POST['post_type'] == 'page') {
	  if (!current_user_can('edit_page', $post_id))
	    return $post_id;
	}
	else {
	  if (!current_user_can('edit_post', $post_id))
	    return $post_id;
	}
	
	// If we reach this point in the code, that means we're authenticated. Proceed with saving the new data
	foreach ($meta_boxes as $meta_box) {
	  foreach ($meta_box['fields'] as $meta_field) {
	    $current_data = get_post_meta($post_id, $meta_field['name'], true);	
	    $new_data = $_POST[$meta_field['name']];
	    
	    if ($current_data) {
	      if ($new_data == '')
		delete_post_meta($post_id, $meta_field['name']);
	      elseif ($new_data == $meta_field['default'])
		delete_post_meta($post_id, $meta_field['name']);
	      elseif ($new_data != $current_data)
		update_post_meta($post_id, $meta_field['name'], $new_data);
	    }
	    elseif ($new_data != '')
	      add_post_meta($post_id, $meta_field['name'], $new_data, true);
	  }
	}
}


function wbg_meta_boxes($meta_name = false) {
  $meta_boxes = array(
		      'submitting_author' => array(  
						   'id'        => 'wbg-submitting-author-meta',
						   'title'     => 'Submitting Author',							
						   'function'  => 'wbg_submitting_author_meta_box',
						   'noncename' => 'wbg_submitting_author_nonce',
						   'fields' =>
						   array(  
							 'submitting_author_firstname' => array(
												'name'          => '_wbg_submitting_author_firstname',  
												'type'          => 'text',
												'width'         => 'full',
												'default'       => '',
												'title'         => 'First Name',
												'margin'        => 'true',										       
											       'description'   => '',  											      
											       'label'         => '',
												),  
							 'submitting_author_lastname' => array(  
											       'name'          => '_wbg_submitting_author_lastname',  
											       'type'          => 'text',
											       'width'         => 'full',
											       'default'       => '',
											       'title'         => 'Last Name',
											       'description'   => '',  											      
											       'label'         => '',
											       'margin'        => 'true',										       
											       ),  
							 'submitting_author_email' => array(  
											    'name'          => '_wbg_submitting_author_email',  
											    'title'         => 'Email',
											    'width'         => 'full',
											    'default'       => '',
											    'description'   => '',  											      
											    'label'         => '',
											    'type'          => 'text',
											    'margin'        => 'true',										       
											    ),  
							 )
						   ),
		      
		      'authors' => array(  
					 'id'        => 'wbg-authors-meta',
					 'title'     => 'Authors',							
					 'function'  => 'wbg_authors_meta_box',
					 'noncename' => 'wbg_authors_nonce',
					 'instructions' => 'Enter authors here, including the submitting author. Authors will be listed in the order they are entered. Email addresses are optional for all authors except corresponding authors.<br /><br />Indicate corresponding authors by selecting the <b>Corresponding Author</b> checkbox and providing an email address.',
					 'fields' =>
					 array(  
					       // These fields will be replicated 10x
					       'author_firstname' => array(
									   'name'          => '_wbg_author_firstname',  
									   'type'          => 'text',
									   'width'         => 'full',
									   'default'       => '',
									   'title'         => 'First Name',
									   'description'   => '',
									   'margin'        => 'true',										       
									   ),  
					       'author_lastname' => array(  
									  'name'          => '_wbg_author_lastname',  
									  'type'          => 'text',
									  'width'         => 'full',
									  'default'       => '',
									  'title'         => 'Last Name',
									  'description'   => '',  											      
									  'label'         => 'the label',
									  'margin'        => 'true',										       
									  ),  
					       'author_is_corresponding' => array(  
										  'name'          => '_wbg_author_is_corresponding',  
										  'type'          => 'checkbox',
										  'width'         => 'full',
										  'default'       => '',
										  'title'         => 'Is corresponding?',
										  'description'   => '',  											      
										  'label'         => 'the label',
										  'margin'        => 'true',										       
										  ),  
					       'author_email' => array(  
								       'name'          => '_wbg_author_email',  
								       'type'          => 'text',
								       'width'         => 'full',
								       'default'       => '',
								       'title'         => 'Email',
								       'description'   => '',  											      
								       'label'         => 'the label',
								       'margin'        => 'true',										       
								       ),  
	
					       ),
					 
					 ),

		      'affiliations' => array(  
					      'id'        => 'wbg-affiliations-meta',
					      'title'     => 'Affiliations',							
					      'function'  => 'wbg_affiliations_meta_box',
					      'noncename' => 'wbg_affiliations_nonce',
					      'instructions' => 'Enter author affiliations here, one affiliation per row. Associate authors with each affiliation by selecting the boxes that correspond to the authors above.',
					      'examples' => 
					      '
<b>Within the US</b>: Department, Institute, University, City State abbreviation<br /><br/>
    

&nbsp; &nbsp; Department of Biochemistry and Molecular Biophysics, Howard Hughes Medical Institute, Columbia University, New York NY<br /><br />
&nbsp; &nbsp; Department of Biology, Portland State University, Portland OR<br /><br />
		              
<b>In Canada</b>: Department, University, City, Province, Canada<br /><br />
            
&nbsp; &nbsp; Department of Biochemistry, Queen’s University, Kingston, ON, Canada<br /><br />

<b>In other countries:</b> Department, Institute, University, City, Country<br /><br />
             
&nbsp; &nbsp; Institute of Physiology, University of Zürich, Zürich, Switzerland<br /><br />
	    
&nbsp; &nbsp; Institute of Plant Protection, Georgikon Faculty, University of Pannonia, Keszthely, Hungary<br /><br />

<b>If not at a University</b>:  Name of company/institute, City, State or Country<br /><br />

&nbsp; &nbsp; New Scientific Technologies Ltd (Asinex Ltd), Moscow, Russian Federation',

					      'fields' =>
					      array(  
						    'affiliation' => array(
									   'name'          => '_wbg_affiliation',  
									   'type'          => 'text',
									   'width'         => 'full',
									   'default'       => '',
									   'title'         => 'Affiliation',
									   'description'   => 'this is the description',
									   'margin'        => 'true',										       
									   ),  
						    'affiliation2authors' => array(  
										   'name'          => '_wbg_affiliations2authors',  
										   'type'          => 'checkbox',
										   'width'         => 'full',
										   'default'       => '',
										   'title'         => 'Affiliated Authors',
										   'description'   => '',  											      
										   'label'         => 'the label',
										   'margin'        => 'true',
										   ),  
						    ),
					      ),


		      'references' => array(  
						   'id'        => 'wbg-references-meta',
						   'title'     => 'References',							
						   'function'  => 'wbg_references_meta_box',
						   'noncename' => 'wbg_references_nonce',
						   'fields' =>
						   array(  
							 'reference' => array(
												'name'          => '_wbg_reference',  
												'type'          => 'textarea',
												'width'         => 'full',
												'default'       => '',
												'title'         => 'Reference',
												'description'   => 'this is the description',
												'margin'        => 'true',										       
												),  
							 'reference_marked_up' => array(  
											'name'          => '_wbg_reference_marked_up',  
											'type'          => 'textarea',
											'width'         => 'full',
											'default'       => '',
											'title'         => 'Reference (marked up)',
											'description'   => '',
											'label'         => 'the label',
											'margin'        => 'true',								       
											),  
							 ),
						   ),

		      // This panel will ONLY be shown to moderators or admins
		      'processed_abstracts' => array(  
						     'id'        => 'wbg-processed-abstracts-meta',
						     'title'     => 'Submitted/Processed Abstract',							
						     'function'  => 'wbg_processed_abstracts_meta_box',
						     'noncename' => 'wbg_processed_abstracts_nonce',
						     'fields' =>
						     array(  
							 'abstract_submitted' => array(
										       'name'          => '_wbg_submitted_abstract',  
										       'type'          => 'wysiwyg',
										       'width'         => 'full',
										       'default'       => '',
										       'title'         => 'Abstract',
										       'description'   => 'this is the description',
										       'margin'        => 'true',										       
										       ),  
							 ),
						   'abstract_marked_up' => array(
										 'name'          => '_wbg_marked_up_abstract',  
										 'type'          => 'wysiwyg',
										 'width'         => 'full',
										 'default'       => '',
										 'title'         => 'Abstract',
										 'description'   => 'this is the description',
										 'margin'        => 'true',										       
										 ), 
						   ),

		      );
  
  if ($meta_name)
    return $meta_boxes[$meta_name];
  else
    return $meta_boxes;
}




function wbg_submitting_author_meta_box() {
  wbg_add_meta_box('submitting_author');
}

function wbg_authors_meta_box() {
  wbg_add_meta_box('authors');
}

function wbg_affiliations_meta_box() {
  wbg_add_meta_box('affiliations');                   
}

function wbg_references_meta_box() {
  wbg_add_meta_box('references');                   
}

function wbg_figures_meta_box() {
    wbg_add_meta_box('figures');
}

function wbg_wordupload_meta_box() {
  wbg_add_meta_box('wordupload');
}

function wbg_processed_abstracts_meta_box() {
    wbg_add_meta_box('processed_abstracts');
}


function wbg_add_meta_box($box_name) {
  global $post;
  
  // Grab this meta box item's information from the construct array
  $meta_box = wbg_meta_boxes($box_name);
  $box_instructions = $meta_box['instructions'];  // Box level instructions
  $examples         = $meta_box['examples'];

  if ($box_instructions) {
    $switch = ' <a class="switch" href="">[+] more info</a>';
    $description = '<p class="description">' . $box_instructions . '</p>' . "\n";
    echo "<div class=\"thesis-post-control\">\n";
    echo '<p><strong>Instructions</strong>' . $switch . '</p>' . "\n";
    //echo "<p>$switch</p>\n";
    echo $description;
    echo '</div>';
  }

  if ($examples) {
    $switch = ' <a class="switch" href="">[+] more info</a>';
    $description = '<p class="description">' . $examples . '</p>' . "\n";
    echo "<div class=\"thesis-post-control\">\n";
    echo '<p><strong>Examples</strong>' . $switch . '</p>' . "\n";
    //echo "<p>$switch</p>\n";
    echo $description;
    echo '</div>';
  }

  // Authors require some custom formatting
  if ($box_name == 'authors') {

      echo "<table><tr><th>Author</th><th>First Name</th><th>Last Name</th><th>Corresponding<br />Author?</th><th>EMail</th>";
      //      echo "<th>Affiliations</th>";
      echo "</tr>";
     
      // Authors are repeated 10x, placed into a table
      // Field names will have the index appended

      for ($index=1;$index<11;$index++) {
	echo '<tr><td>' . $index . '</td>';

	$count   = 0;
	foreach ($meta_box['fields'] as $meta_id => $meta_field) {
	  $count++;
	  
	  // Create a name for this field. It just has the index appended.
	  $name = $meta_field['name'] . '_' . $index;
	  
	  $existing_value = get_post_meta($post->ID, $name, true);
	  $value = ($existing_value != '') ? $existing_value : $meta_field['default'];
	  
	  if ($count == 1 || $count == 2 || $count == 4) {
	    // firstname (column 1), lastname (column 2), email (column 4)
	    echo '<td><input type="text" size="20" name="' . $name
	      . '" id="' . $name . '" value="' 
	      . $value . '" /></td>';
	  }
	  
	  if ($count == 3) {
	    // Checkbox for corresponding author
	    $checked = ($value) ? ' checked="checked"' : '';
	    echo '<td><input type="checkbox" id="' . $name . '" name="' . $name . '" value="1"' . $checked . ' /></td>';	  
	  }
	  
	  if ($count == 4) {
	    $count = 0;
	    echo '</tr>';
	  }
	}
      }

      echo "</table>";
      echo '</div>';
      
  } elseif ($box_name == 'affiliations') {
							
      // Display 10 maximum affiliations
      echo "<table><tr><th>ID</th><th>Affiliation</th>";
      echo "<th width='50%'>Affiliated Authors</th></tr>";

      // Affiliation fields are repeated 5 times
      // Field names will have the index appended

      for ($index=1;$index<6;$index++) {
	
	echo '<tr><td>' . $index . '</td>';
	
	$count   = 0;
	foreach ($meta_box['fields'] as $meta_id => $meta_field) {
	  $count++;

	  // Create a name for this field. It just has the index appended.
	  $name = $meta_field['name'] . '_' . $index;
	  
	  $existing_value = get_post_meta($post->ID, $name, true);
	  $value = ($existing_value != '') ? $existing_value : $meta_field['default'];

	  // Affiliations
	  if ($count == 1) {
	    echo '<td><textarea rows="3" cols="40" name="' . $name
	      . '" id="' . $name . '" value="' 
	      . $value
	      . '"></textarea></td>';
	  }
	  
	  // Affiliated Authors, replicated 10x
	  if ($count == 2) {
	    
	    // The form show affiliations -> authors,
	    // but the data schema maps authors -> affiliations in order to facilitate display.
	    // To display
	    // 1. iterate over authors, getting their ids
	    // 2. get_post_meta for prefixauthors2affiliations$id (possibly array of affiliation ids)
	    // 3. list the corresponding affiliation
	    echo '<td>';
	    echo '<table width="100%"><tr>';
	    for ($authorid=1;$authorid<11; $authorid++) {
	      echo "<td>$authorid</td>";
	    }
	    echo '</tr>';
	    
	    echo '<tr>';
	    for ($authorid=1;$authorid<11; $authorid++) {
	      // append the author ID to the original field name
	      // eg : _wbg_affiliiations2authors_1_author_1
	      $checkbox_group = $name . '_authors';
	      
	      $checked = ($value) ? ' checked="checked"' : '';
	      echo '<td><input type="checkbox" id="' . $checkbox_group . '" name="' . $checkbox_group . '" value="' . $author_id . '" ' . $checked . ' /></td>';	  
	    }
	    echo '</tr></table>';
	    echo '</td></tr>';
	    $count == 0;
	  }
	}
      }
      echo '</table>';      
      //      echo '</div>';


  } elseif ($box_name == 'references') {

    // Display 5 maximum references
    echo "<table><tr><th>ID</th><th>Submitted Reference</th><th>Marked up Reference</th></tr>";
    
    for ($index=1;$index<6;$index++) {

      echo '<tr><td>' . $index . '</td>';
      $count   = 0;
      foreach ($meta_box['fields'] as $meta_id => $meta_field) {
	$count++;	
	
	// Create a name for this field. It just has the index appended.
	$name = $meta_field['name'] . '_' . $index;
	
	$existing_value = get_post_meta($post->ID, $name, true);
	$value = ($existing_value != '') ? $existing_value : $meta_field['default'];
	if ($count == 1 || $count == 2) {
	  echo '<td><textarea rows="3" cols="30" name="' . $name
	    . '" id="' . $name . '" value="' 
	    . $value
	    . '"></textarea></td>';
	}
	
	if ($count == 2) {
	  $count == 0;
	  echo '</tr>';	  
	}
      }
    }
    echo '</table>';
    //    echo '</div>';


  } elseif ($box_name == 'processed_abstracts') {

    echo "<p><i>This panel is displayed only to moderators. It contains two versions of the abstract. The first is the originally submitted version.  The second version -- which is the publication version -- contains markup after processing through Textpresso'</i></p>";
      
  } elseif ($box_name == "wordupload") {
    echo '<p><i>This is the original Word-formatted upload, used to verify formatting</i></p>';



  //  Default formatting
  } else {
    
    // Spit out the actual form on the WordPress post page
    foreach ($meta_box['fields'] as $meta_id => $meta_field) {
      // Grab the existing value for this field from the database
      $existing_value = get_post_meta($post->ID, $meta_field['name'], true);
      $value = ($existing_value != '') ? $existing_value : $meta_field['default'];
      $margin = ($meta_field['margin']) ? ' class="add_margin"' : '';
      
      echo "<div id=\"$meta_id\" class=\"thesis-post-control\">\n";
      
      if ($meta_field['description']) {
	$switch = ' <a class="switch" href="">[+] more info</a>';
	$description = '<p class="description">' . $meta_field['description'] . '</p>' . "\n";
      }
      else {
	$switch = '';
	$description = '';
      }
      
      if ($meta_field['title'])
	echo '<p><strong>' . $meta_field['title'] . '</strong>' . $switch . '</p>' . "\n";
      
      if ($description)
	echo $description;
      
      
      if (is_array($meta_field['type'])) {
	if ($meta_field['type']['type'] == 'radio') {
	  $options = $meta_field['type']['options'];
	  $default = $meta_field['default'];
	  
	  echo '<ul' . $margin . '>' . "\n";
	  
	  foreach ($options as $option_value => $label) {
	    if ($existing_value)
	      $checked = ($existing_value == $option_value) ? ' checked="checked"' : '';
	    elseif ($option_value == $default)
	      $checked = ' checked="checked"';
	    else
	      $checked = '';
	    
	    if ($option_value == $default)
	      $option_value = '';
	    
	    echo '	<li><input type="radio" name="' . $meta_field['name'] . '" value="' . $option_value . '"' . $checked .' /> <label>' . $label . '</label></li>' . "\n";
	  }
	  
	  echo '</ul>' . "\n";
	}
      }	
      elseif ($meta_field['type'] == 'text') {
	$width = ($meta_field['width']) ? ' ' . $meta_field['width'] : '';
	
	echo '<p' . $margin . '>' . "\n";
	echo '	<input type="text" class="text_input' . $width . '" id="' . $meta_field['name'] . '" name="' . $meta_field['name'] . '" value="' . $value . '" />' . "\n";
	echo '	<label for="' . $meta_field['name'] . '">' . $meta_field['label'] . '</label>' . "\n";
	echo '</p>' . "\n";
      }
      elseif ($meta_field['type'] == 'textarea') {
	echo '<p' . $margin . '>' . "\n";
	echo '	<textarea id="' . $meta_field['name'] . '" name="' . $meta_field['name'] . '">' . $value . '</textarea>' . "\n";
	echo '	<label for="' . $meta_field['name'] . '">' . $meta_field['label'] . '</label>' . "\n";
	echo '</p>' . "\n";
      }

      elseif ($meta_field['type'] == 'wysiwyg') {

	echo '<textarea name="' . $meta_field[ 'name' ] . '" id="' . $meta_field[ 'name' ] . '" columns="30" rows="3">' . $value . '</textarea>';	

 ?>
 <script type="text/javascript">
    jQuery( document ).ready( function() {
      jQuery( "<?php echo $meta_field['name']; ?>" ).addClass( "mceEditor" );
      if ( typeof( tinyMCE ) == "object" && typeof( tinyMCE.execCommand ) == "function" ) {
	tinyMCE.execCommand( "mceAddControl", false, "<?php echo $meta_field['name']; ?>" );
      }
    });
</script>
    <?php 
    }
      

      elseif ($meta_field['type'] == 'checkbox') {
	$checked = ($value) ? ' checked="checked"' : '';
	echo '<p' . $margin . '><input type="checkbox" id="' . $meta_field['name'] . '" name="' . $meta_field['name'] . '" value="1"' . $checked . ' /> <label for="' . $meta_field['name'] . '">' . $meta_field['label'] . '</label></p>' . "\n";
      }
      
      echo '</div>' . "\n";
    }
    
    // What is this for?
    echo '	<input type="hidden" name="' . $meta_box['noncename'] . '_noncename" id="' . $meta_box['noncename'] . '_noncename" value="' . wp_create_nonce(plugin_basename(__FILE__)) . '" />' . "\n";
    
  }
}



//      var id = getElementById("id").value;
//      //  $("#divTxt").append("hello");
//      
//      //  $(‘#row’ + id).highlightFade({
//      //speed:1000
//      //	});
//      
//      // id = (id – 1) + 2;
//      //document.getElementById(“id”).value = id;


//
     // This should be more like
      // <a id="add_form_element">Add Author</a>
      // $('#add_form_element').click(function() {
      
      // Get the inner value, see what it is, then insert the appropriate form element.
      
      //    }







/* ****************************************
   Contributing authors should only be
   able to see their posts and nobody elses
   **************************************** */
function posts_for_current_author($query) {
  global $user_level;
  
  if ($query->is_admin && $user_level < 2) {
    global $user_ID;
    $query->set('author',  $user_ID);
    unset($user_ID);
  }
  unset($user_level);
  
  return $query;
}
add_filter('pre_get_posts', 'posts_for_current_author');


/* ****************************************
   Let's let contributors upload files.
   **************************************** */
if ( current_user_can('contributor') && !current_user_can('upload_files')) {
  add_action('admin_init', 'allow_contributor_uploads');
}

function allow_contributor_uploads() {
  $contributor = get_role('contributor');
  $contributor->add_cap('upload_files');
}




/* ****************************************
   Customize the log-in screen
   **************************************** */

function custom_login() {
  // Path is hard-coded get_options
  echo '<link rel="stylesheet" type="text/css" href="' . get_option('siteurl') . '/wp-content/themes/' . get_option('template') . '/custom/custom_login.css" />';
}
add_action('login_head', 'custom_login');






/* To Do

DONE 1. Custom style for the log-in and registration page
2. Wire up form inputs and save mechanism (probably need to expand save function)
3. add in JS for easier form handling
4. Add Textpresso web-service markup
4. Add fields for pre/post-processed text (post-processed should maybe only be visible to admins)
5. Add preview
6. Update template for post Volume 18, No. 2. These should use the new fields. Old formatting needs to be preserved.
7. Add Published on date, revision dates
8. User levels have been deprecated in 3.0! Need to replace...

*/




// If I end up using Custom Field Template...
// Get Custom Field Template Values
function getCustomField($theField) {
  global $post;
  $block = get_post_meta($post->ID, $theField);
  if($block){
    foreach(($block) as $blocks) {
      echo $blocks;
    }
  }
}

/* Here's how the display would work

<div id="block-1" class="content-box">
<h2>Block #1</h2>
<div class="entry">
<?php getCustomField('Block #1'); ?>
</div>
</div>
<div id="block-2" class="content-box">
<h2>Block #2</h2>
<div class="entry">
<?php getCustomField('Block #2'); ?>
</div>
</div>

*/









/* ********************************************

   Create a custom post type exclusively for abstracts

   ******************************************** */

add_action( 'init', 'create_post_type' );
add_action( 'init', 'create_abstract_taxonomies',0);


function create_post_type() {
  register_post_type( 'wbg_abstracts',
		      array(
			    			    'labels' => array(
			    		      'name' => __( 'Abstracts' ),
			    		      'singular_name' => __( 'Abstracts' )
			    		      ),
			    'public' => true,
			    'description' => 'Abstracts submitted for inclusion to the Gazette',
			    'supports' => array('title','editor','revisions'),
			    'menu_position' => 5,   // Place abstracts just beow posts in the admin menu
			    'description' => __( 'Abstracts submitted for inclusion in the Gazette.' ),
			    'add_new' => __( 'Add New Abstract' ),
			    'add_new_item' => __( 'Add New Abstract' ),
			    'edit' => __( 'Edit' ),
			    'edit_item' => __( 'Edit Abstract' ),
			    'new_item' => __( 'New Abstract' ),
			    'view' => __( 'View Abstract' ),
			    'view_item' => __( 'View Abstract' ),
			    'search_items' => __( 'Search Abstracts' ),
			    'not_found' => __( 'No Abstracts found' ),			    
			    'not_found_in_trash' => __( 'No Abstracts found in Trash' ),
			    //			    'register_meta_box_cb' => '
			    )
		      );
}


/* Establish a couple of taxonomies for abstracts */
function create_abstract_taxonomies() {
  $labels = array(
		  'name'          => _x( 'Volumes','taxonomy general name'),
		  'singular_name' => _x( 'Volume','taxonomy singular name'),
		  'search_items'  => __( 'Search Volumes' ),
		  'all_items'     => __( 'All Volumes' ),
		  //		  'parent_item'   => __( 'Parent Genre' ),
		  // 'parent_item_colon' => __( 'Parent Genre:' ),
		  'edit_item'     => __( 'Edit Volume' ), 
		  'update_item'   => __( 'Update Volume' ),
		  'add_new_item'  => __( 'Add New Volume' ),
		  'new_item_name' => __( 'New Volume Name' ),		  
		  ); 
    
  register_taxonomy('volume',array('wbg_abstracts'), array(
							   'hierarchical' => true,
							   'labels' => $labels,
							   'show_ui' => true,
							   'query_var' => true,
							   'rewrite' => array( 'slug' => 'volume' ),
							   // Restrict who can assign terms
							   'capabillities' => array ('manage_terms' => 'manage_categories',
										     'edit_terms'   => 'manage_categories',
										     'delete_terms' => 'manage_categories',
										     'assign_terms' => 'manage_categories',
										     ),							   
							   ));
  

  // Add new taxonomy, NOT hierarchical (like tags)
  $labels = array(
		  'name' => _x( 'Keywords', 'taxonomy general name' ),
		  'singular_name' => _x( 'Keyword', 'taxonomy singular name' ),
		  'search_items' =>  __( 'Search Keywords' ),
		  'popular_items' => __( 'Popular Keywords' ),
		  'all_items' => __( 'All Keywords' ),
		  'parent_item' => null,
		  'parent_item_colon' => null,
		  'edit_item' => __( 'Edit Keyword' ), 
		  'update_item' => __( 'Update Keyword' ),
		  'add_new_item' => __( 'Add New Keyword' ),
		  'new_item_name' => __( 'New Keyword Name' ),
		  'separate_items_with_commas' => __( 'Separate keywords with commas' ),
		  'add_or_remove_items' => __( 'Add or remove keywords' ),
		  'choose_from_most_used' => __( 'Choose from the most used keywords' )
		  ); 

  register_taxonomy('keyword','wbg_abstracts',array(
					   'hierarchical' => false,
					   'labels' => $labels,
					   'show_ui' => true,
					   'query_var' => true,
					   'rewrite' => array( 'slug' => 'keywords' ),
					   ));
}



/* Configure columns for the administrative display */
add_filter( "manage_edit-wbg_abstracts_columns", "wbg_abstracts_column_headers");
add_action( "manage_posts_custom_column",        "wbg_abstracts_column_contents");

function wbg_abstracts_column_headers($columns) {
  $columns = array(
		   "cb"       => "<input type=\"checkbox\" />",
		   "title"    => "Abstract Title",
		   "volume"   => "Volume",
		   "author"   => "Submitting Author",
		   "comments" => 'Comments',
		   );
  return $columns;
}


function wbg_abstracts_column_contents($column) {
  global $post;
  if ("ID" == $column) echo $post->ID;

  // This isn't working
  if ("volume" == $column) {
    $categories = get_the_category(',');
    echo $categories[0]->category_nicename;    
    // Link to the TOC
    //    echo '<a href="/wbg/archive/' . $categories[0]->category_nicename . '/">contents</a>';
    
    //echo $post->category_nicename;    
  }
}