#!/usr/bin/perl -w

############################################################
#
#    written by Igor Antoshechkin
#    igor.antoshechkin@caltech.edu
#    Dec. 2005
#
############################################################

use strict;
use Search::Indexer;
use Storable qw(store retrieve);
use CGI;
use CGI::Carp qw(fatalsToBrowser);
use Boilerplate;


$|=1; #turn off output buffering

my $indexDir="/usr/local/bookworm/search_index";                    # directory in which index files are (ixw.bdb, ixp.bdb, ixd.bdb)
my $nameFile="/usr/local/bookworm/search_index/lookup.name";        # full name of lookup.name file
my $contentFile="/usr/local/bookworm/search_index/lookup.content";  # full name of lookup.content file
my $sectionFile="/usr/local/bookworm/search_index/lookup.sections"; # full name of lookup.sections file
my $htmlDir="/usr/local/bookworm/html/chapters/";                   # path to the root directory of the web page
my $htmlRoot="http://www.wormbook.org/chapters/";                   # URL that prefixes all pages (e.g. http://www.wormbook.org)
my $ctxtNumChars=60;                                                # number of characters to print around the match string
my $maxExcerpts=4;                                                  # max number of matched lines to print per matched document
my $preMatch="<b><font color=#933794>";                             # opening formatting tag for the match string
my $postMatch="</b></font>";                                        # closing formatting tag for the match string

my $q=new CGI;

if (! $ENV{QUERY_STRING} && $q->param("query") && ! $q->param("noQueryString")) {    # prints query params on the URL line (use with JavaScript-based highlighling of terms in other pages)
    my $self_url=$q->self_url;
    $self_url=~s/;search=Search//;
    print $q->redirect($self_url);
}

my $query=$q->param("query");
my $search=$q->param("search");
my $search_pdf=$q->param("search_pdf");
my $search_html=$q->param("search_html");
my $search_preprints=$q->param("search_preprints");
print $q->header("text/html");

#############################################################
#  
#     put your header html here (css, header, etc.)
#     e.g. print "<link rel=\"stylesheet\" href=\"http://elbrus.caltech.edu/~igor/wormbase.css\">";
#
#############################################################

my $boiler = Boilerplate->new();
print $q->start_html(-title=>'WormBook Search',-style=>{src=>'/css/bookworm.css'});
print qq(<div id="container">);
print $boiler->banner;

my $ix = new Search::Indexer(dir => $indexDir, ctxtNumChars => $ctxtNumChars, maxExcerpts => $maxExcerpts, preMatch => $preMatch, postMatch => $postMatch);

my %file_hash=();
my %doc_hash=();
my %section_hash=();

my $ref = retrieve($nameFile) || die "cannot retrieve $nameFile : $!\n";
%file_hash=%$ref;
$ref = retrieve($contentFile) || die "cannot retrieve $contentFile : $!\n";
%doc_hash=%$ref;
$ref = retrieve($sectionFile) || die "cannot retrieve $sectionFile : $!\n";
%section_hash=%$ref;

$query = lc $query;
$query=~s/ and / AND /g;
$query=~s/ or / OR /g;
$query=~s/ not / NOT /g;

my $result = $ix->search($query);
my @docIds = sort {${$result->{scores}}{$b} <=> ${$result->{scores}}{$a}} keys %{$result->{scores}};  #sort by score, descending
my $killedWords = join ", ", @{$result->{killedWords}};

my %aggr_file_hash=();
foreach (@docIds) {
    my $tmp=$file_hash{$_}=~/(.*)\#.*/ ? $1 : $file_hash{$_};
    if (! $search_pdf) {
	next if $tmp=~/\.pdf$/i and !($tmp=~/preprints/i);
    }
    if (! $search_html) {
        next if $tmp=~/\.html$/i;
    }
    if (! $search_preprints) {
        next if $tmp=~/preprints/i;
    }
    $aggr_file_hash{$tmp}{score}+=${$result->{scores}}{$_};
    $aggr_file_hash{$tmp}{title}=$section_hash{$_}{title};
    push @{$aggr_file_hash{$tmp}{id}}, $_;
}

#print "<br><b><font color=blue>", scalar(@docIds), " sections in ", scalar keys %aggr_file_hash, " documents found </font></b><br>";
print "<br><b><font color=blue>", scalar keys %aggr_file_hash, " documents found </font></b>";
print "<font color=black><a href=\"/search.html\">(search tips)</a></font><br><br>";
print "<font color=black>Download all chapters : <a href=\"http://dev.WormBook.org/WormBook.zip\">WormBook.zip</a> (380 MB)</font><br>";
print "<br>Word(s) <font color=red>$killedWords</font> were ignored during the search<br>" if $killedWords;
print "<br><hr width=100%>";

foreach my $doc (sort {$aggr_file_hash{$b}{score} <=>  $aggr_file_hash{$a}{score}}keys %aggr_file_hash) {
    my $tmp_title=$aggr_file_hash{$doc}{title};
    $tmp_title=~s/$htmlDir/$htmlRoot/g;
    my $filetype=$file_hash{${$aggr_file_hash{$doc}{id}}[0]};
    if ($filetype=~/preprints/i) {
	$tmp_title.=" [preprint PDF]";
    }
    elsif ($filetype=~/pdf/i) {
	$tmp_title.=" [PDF]";
    }
    else {
	$tmp_title.=" [HTML]";
    }
    print "<br><b><font color=black>$tmp_title</font></b><br>";
    print "<dd>";
    foreach my $id (sort {$a <=> $b} @{$aggr_file_hash{$doc}{id}}) {
	my $score = $result->{scores}{$id};
	my $excerpts = join "<br>", @{$ix->excerpts($doc_hash{$id}, $result->{regex})};
	my $tmpurl=$file_hash{$id};
	my $tmpname="$section_hash{$id}{title}";
	$tmpname.=": $section_hash{$id}{section}" if $section_hash{$id}{section};
	$tmpurl=~s/$htmlDir/$htmlRoot/g;
	$tmpname=~s/$htmlDir/$htmlRoot/g;
	print "<font style=\"line-height: 1.5\">";
	print "<a href=$tmpurl>$tmpname</a><br>";
	print "$excerpts<br><br>";
	print "</font>";
    }
    print "</dd>";
}

#############################################################
#  
#     put your footer html here 
#
#############################################################
print qq(</div>);
print $boiler->footer;


